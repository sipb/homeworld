load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive", "http_file")

# TODO: audit all downloads, make sure they're all source code
# old version used for go1.9.3 support
http_archive(
    name = "io_bazel_rules_go",
    urls = ["https://github.com/bazelbuild/rules_go/releases/download/0.14.7/rules_go-0.14.7.tar.gz"],
    sha256 = "1a5b8d49a052127af0d444c8e9711a120dd50e373a8da88714fdda46e11f7a90",
)

http_archive(
    name = "bazel_gazelle",
    urls = ["https://github.com/bazelbuild/bazel-gazelle/releases/download/0.15.0/bazel-gazelle-0.15.0.tar.gz"],
    sha256 = "6e875ab4b6bf64a38c352887760f21203ab054676d9c1b274963907e0768740d",
)

load("@io_bazel_rules_go//go:def.bzl", "go_rules_dependencies", "go_register_toolchains")

go_rules_dependencies()

# TODO: stop using binaries built by upstream; use our own
go_register_toolchains(
    # TODO: bump this to 1.10+, so that we can stop using an old version of rules_go!
    go_version = "1.9.3",
)

load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies", "go_repository")
load("//bazel:gorepo_patchfix.bzl", "go_repository_alt")

gazelle_dependencies()

http_archive(
    name = "io_kubernetes_build",
    sha256 = "9d4948cb1d6e70c7eab21e06186aa32ce9063a70b2b2092ae9346f3302ce7ff9",
    strip_prefix = "repo-infra-9759aa30612237743df7bece2462d8d98630d49b",
    urls = ["https://github.com/kubernetes/repo-infra/archive/9759aa30612237743df7bece2462d8d98630d49b.tar.gz"],
)

# TODO: update to a newer kubernetes
http_archive(
    name = "kubernetes",
    sha256 = "f797ae96c9f024549edb129110b64be34e5bb9c3ab71e3990e0dc5e3e4a0bd4d", # for 1.10.12
    type = "tar.gz",
    urls = ["https://dl.k8s.io/v1.10.12/kubernetes-src.tar.gz"],
    patches = [
        "//kubernetes:0103-gazelle-proto-disable.patch",
        "//kubernetes:0104-staging-prefix.patch",
        "//kubernetes:0105-vendor-importmap.patch",
        "//kubernetes:0106-reformat-generators.patch",
        "//kubernetes:0107-go-genrule-bump.patch",
        "//kubernetes:0108-no-prefix.patch",
        "//kubernetes:0109-staging-importmap.patch",
        "//kubernetes:0110-rerun-gazelle-2.patch",
        "//kubernetes:0200-aci-launch.patch",
    ],
    patch_args = ["-p1"],
)

# debian ISO

http_file(
    name = "debian_iso",
    urls = ["http://ftp.debian.org/debian/dists/stretch/main/installer-amd64/20170615+deb9u5/images/netboot/mini.iso"],
    sha256 = "53fbdc4469216d7cf80023d58925d37add5a81817b43b7a36cd53dd7f606816d",
)

# dnsmasq

http_archive(
    name = "dnsmasq",
    urls = ["http://www.thekelleys.org.uk/dnsmasq/dnsmasq-2.78.tar.xz"],
    sha256 = "89949f438c74b0c7543f06689c319484bd126cc4b1f8c745c742ab397681252b",
    build_file = "//dnsmasq:BUILD.import",
)

# etcd

go_repository_alt(
    name = "com_github_coreos_etcd",
    commit = "f1d7dd87da3e8feab4aaf675b8e29c6a5ed5f58b",
    importpath = "github.com/coreos/etcd",
    build_external = "vendored",
    build_file_proto_mode = "disable_global",
    prepatch_cmds = ["mv -Tn cmd/vendor vendor"],  # to get etcd's vendoring strategy to be compatible with gazelle
    postpatches = ["//etcd:etcd-visibility.patch", "//etcd:etcdctl-visibility.patch"],
)

# flannel

go_repository(
    name = "com_github_coreos_flannel",
    commit = "2fd6898a7c9a11a12e63b56ca01143a260ee0aad", # 0.10.0
    importpath = "github.com/coreos/flannel",
    patches = ["//flannel:flannel.patch"],
    patch_args = ["-p1"],
)

# kubernetes client application (like flannel-monitor) dependencies

go_repository_alt(
    name = "io_k8s_apimachinery",
    commit = "68f9c3a1feb3140df59c67ced62d3a5df8e6c9c2",
    importpath = "k8s.io/apimachinery",
    build_file_proto_mode = "disable_global",
    prepatch_cmds = ["find -name BUILD -exec rm {} \;"],
)

go_repository(
    name = "io_k8s_client_go",
    commit = "9389c055a838d4f208b699b3c7c51b70f2368861",
    importpath = "k8s.io/client-go",
    build_file_proto_mode = "disable_global",
)

go_repository(
    name = "io_k8s_api",
    commit = "006a217681ae70cbacdd66a5e2fca1a61a8ff28e",
    importpath = "k8s.io/api",
    build_file_proto_mode = "disable_global",
)

go_repository(
    name = "com_github_google_gofuzz",
    commit = "44d81051d367757e1c7c6a5a86423ece9afcf63c",
    importpath = "github.com/google/gofuzz",
)

go_repository(
    name = "io_k8s_kube_openapi",
    commit = "39a7bf85c140f972372c2a0d1ee40adbf0c8bfe1",
    importpath = "k8s.io/kube-openapi",
)

go_repository(
    name = "com_github_go_openapi_spec",
    commit = "7abd5745472fff5eb3685386d5fb8bf38683154d",
    importpath = "github.com/go-openapi/spec",
)

go_repository(
    name = "com_github_googleapis_gnostic",
    commit = "0c5108395e2debce0d731cf0287ddf7242066aba",
    importpath = "github.com/googleapis/gnostic",
    build_file_proto_mode = "disable_global",
)

go_repository(
    name = "com_github_juju_ratelimit",
    commit = "5b9ff866471762aa2ab2dced63c9fb6f53921342",
    importpath = "github.com/juju/ratelimit",
)

go_repository(
    name = "com_github_ghodss_yaml",
    commit = "73d445a93680fa1a78ae23a5839bad48f32ba1ee",
    importpath = "github.com/ghodss/yaml",
)

go_repository(
    name = "com_github_gregjones_httpcache",
    commit = "787624de3eb7bd915c329cba748687a3b22666a6",
    importpath = "github.com/gregjones/httpcache",
)

go_repository(
    name = "com_github_peterbourgon_diskv",
    commit = "5f041e8faa004a95c88a202771f4cc3e991971e6",
    importpath = "github.com/peterbourgon/diskv",
)

go_repository(
    name = "com_github_json_iterator_go",
    commit = "36b14963da70d11297d313183d7e6388c8510e1e",
    importpath = "github.com/json-iterator/go",
)

go_repository(
    name = "com_github_google_btree",
    commit = "7d79101e329e5a3adf994758c578dab82b90c017",
    importpath = "github.com/google/btree",
)

go_repository(
    name = "com_github_go_openapi_jsonpointer",
    commit = "46af16f9f7b149af66e5d1bd010e3574dc06de98",
    importpath = "github.com/go-openapi/jsonpointer",
)

go_repository(
    name = "com_github_emicklei_go_restful",
    commit = "ff4f55a206334ef123e4f79bbf348980da81ca46",
    importpath = "github.com/emicklei/go-restful",
)

go_repository(
    name = "in_gopkg_inf_v0",
    commit = "3887ee99ecf07df5b447e9b00d9c0b2adaa9f3e4",
    importpath = "gopkg.in/inf.v0",
)

go_repository(
    name = "com_github_spf13_pflag",
    commit = "9ff6c6923cfffbcd502984b8e0c80539a94968b7",
    importpath = "github.com/spf13/pflag",
)

go_repository(
    name = "com_github_go_openapi_swag",
    commit = "f3f9494671f93fcff853e3c6e9e948b3eb71e590",
    importpath = "github.com/go-openapi/swag",
)

go_repository(
    name = "com_github_go_openapi_jsonreference",
    commit = "13c6e3589ad90f49bd3e3bbe2c2cb3d7a4142272",
    importpath = "github.com/go-openapi/jsonreference",
)

go_repository(
    name = "com_github_puerkitobio_purell",
    commit = "8a290539e2e8629dbc4e6bad948158f790ec31f4",
    importpath = "github.com/PuerkitoBio/purell",
)

go_repository(
    name = "com_github_mailru_easyjson",
    commit = "2f5df55504ebc322e4d52d34df6a1f5b503bf26d",
    importpath = "github.com/mailru/easyjson",
)

go_repository(
    name = "com_github_puerkitobio_urlesc",
    commit = "5bd2802263f21d8788851d5305584c82a5c75d7e",
    importpath = "github.com/PuerkitoBio/urlesc",
)

# keysystem dependencies

go_repository(
    name = "org_golang_x_crypto",
    commit = "eb0de9b17e854e9b1ccd9963efafc79862359959",
    importpath = "golang.org/x/crypto",
)

go_repository(
    name = "in_gopkg_yaml_v2",
    commit = "eb3733d160e74a9c7e442f435eb3bea458e1d19f",
    importpath = "gopkg.in/yaml.v2",
)

# knc

http_archive(
    name = "knc",
    urls = ["http://oskt.secure-endpoints.com/downloads/knc-1.7.1.tar.gz"],
    sha256 = "0e24873f2a5228e1814749becbecd67d643bb9f63663cf85a7aeedf8e73de40f",
    build_file = "//knc:BUILD.import",
)

# prometheus

go_repository(
    name = "com_github_prometheus_prometheus",
    commit = "0a74f98628a0463dddc90528220c94de5032d1a0",
    importpath = "github.com/prometheus/prometheus",
    build_external = "vendored",
    build_file_proto_mode = "disable_global",
    patches = ["//prometheus:prometheus-visibility.patch"],
)

# prometheus-node-exporter

go_repository(
    name = "com_github_prometheus_node_exporter",
    commit = "98bc64930d34878b84a0f87dfe6e1a6da61e532d",
    importpath = "github.com/prometheus/node_exporter",
    build_external = "vendored",
    patches = ["//prometheus-node-exporter:visibility.patch"],
)

# prometheus client, for packages like aci-pull-monitor

go_repository(
    name = "com_github_prometheus_client_golang",
    commit = "967789050ba94deca04a5e84cce8ad472ce313c1",
    importpath = "github.com/prometheus/client_golang",
)

go_repository(
    name = "com_github_prometheus_common",
    commit = "b36ad289a3eaecdc52470a19591146a2c0ffb532",
    importpath = "github.com/prometheus/common",
)

go_repository(
    name = "com_github_prometheus_procfs",
    commit = "abf152e5f3e97f2fafac028d2cc06c1feb87ffa5",
    importpath = "github.com/prometheus/procfs",
)

go_repository(
    name = "com_github_prometheus_client_model",
    commit = "5c3871d89910bfb32f5fcab2aa4b9ec68e65a99f",
    importpath = "github.com/prometheus/client_model",
)

go_repository(
    name = "com_github_matttproud_golang_protobuf_extensions",
    commit = "fc2b8d3a73c4867e51861bbdd5ae3c1f0869dd6a",
    importpath = "github.com/matttproud/golang_protobuf_extensions",
)

go_repository(
    name = "com_github_beorn7_perks",
    commit = "3ac7bf7a47d159a033b107610db8a1b6575507a4",
    importpath = "github.com/beorn7/perks",
)

# kubernetes-dns

go_repository_alt(
    name = "com_github_kubernetes_dns",
# TODO: bump to d522d10e2e5e0797637e89ddb0a68a318cc8be60 (1.14.9)
    commit = "d01e5e58d114fcddff98e4f6bf8b2b1484d06c3e", # 1.14.8
    importpath = "k8s.io/dns",
    build_external = "vendored",
    prepatch_cmds = ["find vendor/k8s.io/kubernetes -name BUILD -delete"],
    postpatches = ["//kube-dns:dns-visibility.patch"],
)

# kube-state-metrics

go_repository_alt(
    name = "com_github_kubernetes_kube_state_metrics",
    commit = "5ccda14bbff25a1007e13dfc3a75e5bb998abe6d",           # v1.2.0
    importpath = "k8s.io/kube-state-metrics",
    prepatch_cmds = ["find vendor/k8s.io -name BUILD -delete"],    # because the vendored kubernetes comes with BUILD files that will break the generated BUILDs:
    postpatches = ["//kube-state-metrics:state-visibility.patch"], # so that we can compile our own kube-state-metrics binary with our own options:
)

# rkt

http_archive(
    name = "com_github_rkt_rkt",
    urls = ["https://github.com/rkt/rkt/archive/v1.29.0.tar.gz"],
    sha256 = "d2d89db86b4b3a586a8288ba7becdb87370d4fbe7e12aa37e9b1e30a9f9c9b20",
    patches = ["//rkt:rkt.patch"],
    build_file = "//rkt:BUILD.import",
)

# TODO: something way less sketchy
http_file(
    name = "coreos_image",
    urls = ["https://alpha.release.core-os.net/amd64-usr/1478.0.0/coreos_production_pxe_image.cpio.gz"],
    sha256 = "9897f9e78e207da42a75d03f7ff74c4400dce15843b752adcb3182ebe66c9868",
)

http_file(
    name = "linux_kernel",
    urls = ["https://www.kernel.org/pub/linux/kernel/v4.x/linux-4.14.16.tar.xz"],
    sha256 = "070bdb482245977b1ff7f9008eb6455ec27501fb7438426bb54f3b592513ac24",
)

http_file(
    name = "qemu",
    urls = ["https://download.qemu.org/qemu-2.11.0.tar.xz"],
    sha256 = "c9d34a79024eae080ce3853aa9afe503824520eefb440190383003081ce7f437",
)
